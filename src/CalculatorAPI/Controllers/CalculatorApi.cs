/*
 * Calculator API
 *
 * Calculator API in .NET 7 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tesfai80@hotmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using CalculatorAPI.Attributes;
using CalculatorAPI.Interfaces;
using CalculatorAPI.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.ComponentModel.DataAnnotations;

namespace CalculatorAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    {
        private readonly ICalculator _calculator;
        /// <summary>
        /// Calculator constructor with dependancy injection
        /// </summary>
        /// <param name="calculator"></param>
        public CalculatorApiController(ICalculator calculator)
        {
                _calculator = calculator;
        }
        /// <summary>
        /// Calculate 2 Numbers
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_operator">The operator header (accepts only arithmetic signs( +, -, *, or /)</param>
        /// <response code="200">Successfully calculated</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Authorize]
        [Route("/TESFAI80/CalculatorAPI/1.0.0/calculator")]
        [ValidateModelState]
        [SwaggerOperation("CalculateNumbers")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculatorResponse), description: "Successfully calculated")]
        public virtual IActionResult CalculateNumbers([FromBody]CalculatorRequest body, [FromHeader][Required()]string _operator)
        {
            if (body == null)
            {
                return BadRequest("Invalid request body");
            }
            try
            {
                // repository pattern to perform the calculation
                var result = _calculator.Calculate(
                Convert.ToDouble(body.Number1),
                  Convert.ToDouble(body.Number2), _operator);

                return Ok(new { Result = result });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }
    }
}
