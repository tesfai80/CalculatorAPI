/*
 * Calculator API
 *
 * Calculator API in .NET 7 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tesfai80@hotmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace CalculatorAPI.Models
{
    /// <summary>
    /// Response object representing the calculator result
    /// </summary>
    [DataContract]
    public partial class CalculatorResponse : IEquatable<CalculatorResponse>
    { 
        /// <summary>
        /// The result of the calculation
        /// </summary>
        /// <value>The result of the calculation</value>

        [DataMember(Name="result")]
        public decimal? Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculatorResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CalculatorResponse)obj);
        }

        /// <summary>
        /// Returns true if CalculatorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CalculatorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculatorResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CalculatorResponse left, CalculatorResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CalculatorResponse left, CalculatorResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
